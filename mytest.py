import torch

all_classes = [
    "aeroplane",
    "bicycle",
    "boat",
    "bottle",
    "car",
    "cat",
    "chair",
    "diningtable",
    "dog",
    "horse",
    "person",
    "pottedplant",
    "sheep",
    "train",
    "tvmonitor",
    # "bird",
    # "bus",
    # "cow",
    # "motorbike",
    # "sofa",
    "nectarine",
    "orange",
    "cereal",
    "almond_mix",
]

novel_classes = [
    "nectarine",
    "orange",
    "cereal",
    "almond_mix",
]

novel_classes_ordinal = [all_classes.index(c) for c in novel_classes]

boxes = torch.tensor(
    [
        [777.4671, 667.1852, 1486.2617, 1167.6880],
        [778.4671, 666.1852, 1485.2617, 1166.6880],
        [174.0167, 771.7029, 536.5850, 1153.0959],
        [270.2939, 436.4820, 687.8235, 829.3370],
        [156.5412, 91.5502, 541.5727, 485.2534],
        [787.4107, 505.9247, 1483.5780, 1159.9677],
        [270.2312, 441.9802, 688.8221, 831.6292],
        [122.7886, 74.2271, 568.8619, 490.1729],
        [727.5762, 407.3034, 1510.7455, 1123.5126],
        [146.6385, 72.1854, 561.1438, 473.0880],
        [631.8438, 126.3865, 1495.1578, 956.4740],
        [671.3811, 394.5949, 1464.3556, 1046.3741],
        [761.5974, 560.3542, 1502.6934, 1133.2225],
        [185.8660, 765.9389, 540.4736, 1151.9926],
        [611.2783, 102.6471, 1455.6942, 849.3455],
        [128.3688, 48.6013, 572.3501, 492.8711],
        [601.5264, 91.6690, 1469.3634, 866.5844],
        [163.3148, 738.8737, 549.3549, 1155.9564],
        [145.4795, 66.2460, 559.7930, 480.3864],
        [722.0098, 451.2421, 1479.5669, 900.5067],
        [161.6078, 763.6601, 545.6630, 1146.4263],
        [715.0788, 583.8201, 1520.1586, 1159.1827],
        [614.1376, 103.9953, 1452.4016, 857.8708],
        [644.8567, 109.5500, 1459.5084, 866.3626],
        [615.1171, 248.7703, 1503.7266, 1009.9720],
        [249.5419, 469.3872, 697.5196, 825.9790],
        [120.7535, 65.7752, 568.9664, 481.3836],
        [134.7235, 73.0757, 557.6871, 466.7319],
        [145.0351, 73.0363, 552.9853, 476.0012],
        [261.4767, 430.8154, 692.1194, 832.7818],
        [206.9556, 587.4543, 632.6684, 1020.8284],
        [157.9176, 90.6229, 544.8040, 485.3882],
        [252.3082, 432.6431, 696.8337, 771.4597],
        [723.4206, 498.8880, 1519.7279, 1100.4039],
        [208.4513, 665.7670, 608.8829, 1044.4663],
        [152.8424, 754.7037, 548.3406, 1124.6964],
        [715.0629, 543.3975, 1494.3401, 1192.0376],
        [703.4866, 209.6027, 1444.5052, 1004.5577],
        [142.4862, 69.7428, 557.8529, 440.1942],
        [737.5417, 520.0941, 1520.9218, 1128.8782],
        [777.1355, 569.4548, 1538.4719, 1057.7968],
        [124.7071, 74.1839, 567.6371, 490.2120],
        [128.6235, 74.4110, 574.2770, 487.9946],
        [236.3355, 417.9240, 714.0981, 830.5030],
        [530.3282, 257.2847, 1511.0542, 1054.9285],
        [691.4705, 258.2324, 1522.5522, 1082.2334],
        [264.2039, 423.8156, 699.4059, 825.9386],
        [238.8497, 428.2375, 696.5692, 830.5491],
        [630.2692, 64.2073, 1463.1858, 932.0838],
        [600.3431, 88.5059, 1477.8831, 908.8902],
        [694.1430, 456.5729, 1490.4027, 1093.1324],
        [153.7157, 749.4558, 550.3967, 1166.7520],
        [743.2358, 297.8411, 1469.9711, 1051.4407],
        [145.9600, 39.6294, 561.7382, 472.7554],
        [558.4540, 10.6029, 1493.5911, 856.0659],
        [603.1270, 170.5323, 1487.0139, 960.5545],
        [263.5236, 442.1305, 688.1085, 836.6586],
        [270.4075, 447.7057, 681.1174, 836.9703],
        [263.8205, 420.1493, 687.4504, 834.5822],
        [646.5300, 98.8225, 1523.3862, 871.2657],
        [257.0607, 430.5916, 712.9244, 851.3312],
        [268.5793, 443.9425, 678.7796, 864.2424],
        [251.7965, 431.1908, 704.8333, 847.8421],
        [162.2072, 238.3208, 635.8652, 637.5843],
        [155.2078, 212.7462, 627.2267, 650.4396],
        [637.4794, 133.6889, 1439.1455, 852.3552],
        [255.8286, 414.4562, 714.5430, 832.4722],
        [619.9313, 174.0070, 1522.4310, 939.4916],
        [249.4853, 432.4080, 700.6954, 847.1523],
        [149.2814, 58.1408, 555.3680, 475.0120],
        [161.8227, 764.7266, 547.4653, 1146.1127],
        [645.9398, 239.5368, 1448.1571, 957.9218],
        [618.6458, 134.2346, 1488.6035, 933.0392],
        [784.6763, 529.4958, 1472.4071, 1157.8561],
        [246.3207, 435.1875, 700.5573, 852.6159],
        [678.2853, 440.2408, 1496.9312, 1158.1429],
        [148.1673, 758.5001, 551.4094, 1135.8105],
        [185.2601, 522.4089, 679.7041, 961.1690],
        [161.8311, 791.5736, 543.4716, 1147.8915],
        [82.5607, 785.8939, 1600.0000, 1213.5609],
        [154.9260, 95.0403, 549.2269, 473.5526],
        [183.2096, 167.6692, 610.8092, 607.5617],
        [718.3322, 449.6702, 1487.8593, 1098.4795],
        [626.5621, 387.0959, 1504.0826, 1083.7139],
        [109.4366, 86.3469, 598.2957, 497.4218],
        [138.2946, 106.6423, 580.9700, 486.6723],
        [146.4518, 744.7924, 542.4349, 1144.2690],
        [176.5336, 741.0646, 546.8761, 1113.7539],
        [743.8092, 464.1776, 1581.2725, 1131.2284],
        [152.6974, 99.0629, 551.5627, 471.6765],
        [229.7533, 646.4158, 594.7950, 1023.5500],
        [226.7547, 461.4264, 727.3942, 895.8810],
        [164.2585, 257.1450, 695.3317, 738.8917],
        [153.0468, 762.7640, 542.4456, 1152.3225],
        [770.5752, 450.2314, 1493.9205, 1152.1761],
        [188.3236, 215.5663, 588.9896, 562.7137],
        [170.3459, 227.1104, 698.3474, 678.4518],
        [571.2201, 82.2779, 1539.3909, 833.5571],
        [163.8815, 102.1430, 547.0448, 515.8795],
        [185.4758, 689.3623, 652.4438, 1069.5730],
    ]
)


scores = torch.tensor(
    [
        1.0000e00,
        1.0000e00,
        9.9974e-01,
        9.9925e-01,
        9.9803e-01,
        1.6772e-01,
        1.0330e-01,
        1.3426e-02,
        5.6555e-03,
        5.4483e-03,
        2.8356e-03,
        1.5515e-03,
        1.0994e-03,
        6.9731e-04,
        5.5212e-04,
        5.5116e-04,
        5.3646e-04,
        2.4959e-04,
        2.4049e-04,
        2.3380e-04,
        2.3294e-04,
        1.1169e-04,
        8.0154e-05,
        5.8849e-05,
        4.9775e-05,
        4.2369e-05,
        3.5292e-05,
        3.2201e-05,
        2.2297e-05,
        1.9726e-05,
        1.7766e-05,
        1.7680e-05,
        1.7531e-05,
        1.5974e-05,
        1.3187e-05,
        1.1512e-05,
        1.0165e-05,
        1.0009e-05,
        9.7372e-06,
        9.0024e-06,
        8.8134e-06,
        8.0140e-06,
        7.6155e-06,
        7.2084e-06,
        4.6917e-06,
        4.0298e-06,
        3.5110e-06,
        3.2252e-06,
        3.0301e-06,
        2.4681e-06,
        2.2153e-06,
        2.0290e-06,
        1.0845e-06,
        1.0572e-06,
        9.6077e-07,
        7.3332e-07,
        6.9393e-07,
        6.6324e-07,
        6.3313e-07,
        4.7465e-07,
        4.5776e-07,
        4.0541e-07,
        3.9554e-07,
        3.2602e-07,
        3.2106e-07,
        2.6278e-07,
        2.3872e-07,
        2.2207e-07,
        2.0342e-07,
        1.6582e-07,
        1.5820e-07,
        1.5487e-07,
        1.5442e-07,
        1.1569e-07,
        1.1268e-07,
        9.4383e-08,
        9.3539e-08,
        8.4513e-08,
        8.2109e-08,
        7.8749e-08,
        7.2834e-08,
        6.2798e-08,
        5.1139e-08,
        4.1488e-08,
        3.1447e-08,
        2.7770e-08,
        2.4510e-08,
        2.1184e-08,
        1.5659e-08,
        1.1959e-08,
        8.3822e-09,
        6.9462e-09,
        6.3466e-09,
        5.4866e-09,
        5.1137e-09,
        3.7378e-09,
        2.9960e-09,
        2.8375e-09,
        2.7418e-09,
        2.4583e-09,
    ]
)

pred_classes = torch.tensor(
    [
        18,
        17,
        16,
        15,
        16,
        15,
        16,
        14,
        11,
        6,
        11,
        18,
        5,
        15,
        6,
        0,
        14,
        3,
        3,
        17,
        14,
        7,
        12,
        16,
        5,
        18,
        4,
        2,
        12,
        12,
        15,
        15,
        17,
        6,
        16,
        17,
        16,
        15,
        17,
        8,
        17,
        13,
        1,
        14,
        7,
        10,
        6,
        2,
        0,
        1,
        14,
        0,
        13,
        10,
        10,
        2,
        9,
        8,
        11,
        8,
        10,
        5,
        3,
        6,
        14,
        18,
        4,
        3,
        0,
        11,
        6,
        9,
        4,
        1,
        1,
        0,
        4,
        6,
        18,
        7,
        5,
        10,
        4,
        12,
        7,
        18,
        10,
        11,
        3,
        8,
        3,
        7,
        13,
        8,
        2,
        5,
        17,
        13,
        9,
        18,
    ]
)


candidate_preds = torch.nonzero(
    sum(pred_classes == i for i in novel_classes_ordinal)
    & (scores > 0.2)  # FIXME: score confidence threshold
).squeeze()  # a tensor of indices of plausible predictions


cand_preds_count = candidate_preds.shape[0]

remove_indices = set()

iou_threshold = 0.75  # FIXME[DONE]: choose threshold

for i in range(cand_preds_count - 1):
    for j in range(i + 1, cand_preds_count):
        if (i in remove_indices) or (j in remove_indices):
            continue
        score_i = scores[candidate_preds[i]]
        score_j = scores[candidate_preds[j]]
        box_i = boxes[candidate_preds[i]]
        box_j = boxes[candidate_preds[j]]

        intersection_area = rec_intersection(box_i, box_j)
        union_area = rec_area(box_i) + rec_area(box_j) - intersection_area

        if intersection_area / union_area > iou_threshold:
            remove_indices.add(j if score_i >= score_j else i)

keep_preds = set(range(cand_preds_count)) - remove_indices

final_preds = torch.index_select(candidate_preds, 0, torch.tensor(list(keep_preds)))
